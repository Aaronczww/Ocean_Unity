#pragma kernel Update
#include "UnityCG.cginc"

struct waveSampler
{
	float x;
	float z;
	float3 displacement;

};

RWStructuredBuffer<waveSampler> displacementSample; 

float _S;
float _A1,_A2,_A3,_A4,_A5,_A6,_A7,_A8,_A9,_A10,_A11,_A12;
float _Stp1,_Stp2,_Stp3,_Stp4,_Stp5,_Stp6,_Stp7,_Stp8,_Stp9,_Stp10,_Stp11,_Stp12;
float _D1,_D2,_D3,_D4,_D5,_D6,_D7,_D8,_D9,_D10,_D11,_D12;
float _ShoreWaveAttenuation;
float3 _playerLocation;
sampler2D _heightMap;


float3 SingleWaveDisplacement(float w, float Amp, float Stp, float Dir, float3 vert, float psi, float xScale, float zScale, float timeScale)
{
	float Dz, Dx;
	float Pi = 3.1415926f;
	sincos(Dir / 360  * 2 * Pi , Dz, Dx);
	float phase = w * Dx * vert.x * xScale + w * Dz * vert.z * zScale + psi * _Time.x * timeScale;
	float sinp;float cosp;
	sincos(phase, sinp, cosp);
	float3 disp = float3(0,0,0);
	disp.x = Stp / w * Dx * cosp;
	disp.z = Stp / w * Dz * cosp;
	disp.y = Amp * sinp;
	return disp;
}


void CalculateGerstner(float Amp, float Stp, float Dir, float Lth ,float attenuationFac,float3 vert,out float3 dDisp)
{
	dDisp = float3(0,0,0);
	Stp *= 0.3;
	//attenuationFac  = attenuationFac + (1 - attenuationFac)*sqrt(2/Lth);
	Amp = Amp * attenuationFac * Lth / 40;
	Stp =  (1-step(Amp,0)) * Stp;
	float Pi = 3.1415926f;
	float Dx;float Dz;
	sincos(Dir / 360  * 2 * Pi , Dz, Dx);

	float w = 2 * Pi / Lth;
	float psi = _S * 2 * Pi / 20 / sqrt(Lth);

	dDisp += SingleWaveDisplacement(w,Amp,Stp,Dir,vert,psi,1,1,3.5);
	dDisp += SingleWaveDisplacement(w,Amp*1.00,Stp,Dir+17,vert,psi,0.9,1,4);
	dDisp += SingleWaveDisplacement(w,Amp*0.95,Stp,Dir+46,vert,psi,1.1,0.9,4.5);
	dDisp += SingleWaveDisplacement(w,Amp*0.85,Stp,Dir+65,vert,psi,0.8,1.2,5);
	dDisp += SingleWaveDisplacement(w,Amp*0.75,Stp,Dir+133,vert,psi,1.4,0.8,5.5);
	dDisp += SingleWaveDisplacement(w,Amp*0.65,Stp,Dir+96,vert,psi,0.7,0.65,6);


}

float3 VerticesDisplacement(float3 vert,float attenuationFac)
{

	float3 displace = float3(0, 0, 0); float3 dDisp = float3(0,0,0);

	CalculateGerstner(_A1,_Stp1,_D1,2,attenuationFac,vert,dDisp);
	displace += dDisp;
	CalculateGerstner(_A2,_Stp2,_D2,3,attenuationFac,vert,dDisp);
	displace += dDisp;
	CalculateGerstner(_A3,_Stp3,_D3,5,attenuationFac,vert,dDisp);
	displace += dDisp;
	CalculateGerstner(_A4,_Stp4,_D4,8,attenuationFac,vert,dDisp);
	displace += dDisp;
	CalculateGerstner(_A5,_Stp5,_D5,13,attenuationFac,vert,dDisp);
	displace += dDisp;
	CalculateGerstner(_A6,_Stp6,_D6,21,attenuationFac,vert,dDisp);
	displace += dDisp;
	CalculateGerstner(_A7,_Stp7,_D7,34,attenuationFac,vert,dDisp);
	displace += dDisp;
	CalculateGerstner(_A8,_Stp8,_D8,55,attenuationFac,vert,dDisp);
	displace += dDisp;
	CalculateGerstner(_A9,_Stp9,_D9,89,attenuationFac,vert,dDisp);
	displace += dDisp;
	CalculateGerstner(_A10,_Stp10,_D10,144,attenuationFac,vert,dDisp);
	displace += dDisp;
	CalculateGerstner(_A11,_Stp11,_D11,233,attenuationFac,vert,dDisp);
	displace += dDisp;
	CalculateGerstner(_A12,_Stp12,_D12,377,attenuationFac,vert,dDisp);
	displace += dDisp;


	return displace;

}




[numthreads(1024,1,1)]
void Update(uint3 id : SV_DispatchThreadID)
{
	
	//displacementSample[id.x].displacement = float3(displacementSample[id.x].x,displacementSample[id.x].z,0);
	float xPos = _playerLocation.x + ( - displacementSample[id.x].z + 0.5) * 600.0;
	float zPos = _playerLocation.z + (- displacementSample[id.x].x + 0.5) * 600.0;

	//float height = tex2Dlod(heightMap, float4(1.0 - displacementSample[id.x].z,1.0 - displacementSample[id.x].x,0,0));
	float height = tex2Dlod(_heightMap, float4(xPos/1200 +0.25,zPos/1200 + 0.25,0,0));

	float attenuationFac = 1;    
	attenuationFac = saturate(pow((1.0 - height),_ShoreWaveAttenuation));

	float3 worldPos = float3(xPos,0,zPos);

	displacementSample[id.x].displacement = VerticesDisplacement(worldPos, attenuationFac);


}